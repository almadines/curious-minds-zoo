{"version":3,"sources":["webpack:///./src/pages/animals.tsx","webpack:///./src/components/reset-button/reset-button.tsx","webpack:///./src/components/layout/layout.tsx"],"names":["AnimalsPage","render","title","iconName","linkDetailPages","React","ResetButton","props","mapDispatchToProps","dispatch","dispatchFunction","resetSettings","event","stopPropagation","this","type","ActionType","upsert","values","Settings","names","name","className","onClick","bind","ConnectedResetButton","connect","SaveElementWrapper","mapStateToProps","state","saveElement","stateChanged","SaveElement","ConnectedSaveElementWrapper","Layout","sideMenuExpanded","settings","setSideMenuExpanded","newValue","setState","changeSideMenuState","blockEventPropagation","columnView","BooleanEnum","true","renderColumn","renderNormal","icon","layoutWrapperStyle","fontFamily","backgroundColor","backgroundColour","color","textColour","undefined","expandableSideMenuCss","expandableSideMenu","sideMenuExpandedCss","sideMenuButton","sideNavBacking","style","to","applyDefaultColourToMainContent","children","ConnectedLayout"],"mappings":"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","file":"component---src-pages-animals-tsx-7cc1e652164d33298eef.js","sourcesContent":["import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedAnimalsListPage from \"../components/lists/animals-list\";\r\n\r\nclass AnimalsPage extends React.PureComponent {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Animals:\" iconName=\"pets\">\r\n        <ConnectedAnimalsListPage linkDetailPages={true} />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimalsPage;\r\n","import * as React from \"react\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { Settings } from \"global/types/settings\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./reset-button.scss\";\r\n\r\nexport interface ResetButtonProps {\r\n  //from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\nclass ResetButton extends React.PureComponent<ResetButtonProps> {\r\n  public constructor(props: ResetButtonProps) {\r\n    super(props);\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return { dispatchFunction: dispatch };\r\n  }\r\n\r\n  public resetSettings(event: Event): void {\r\n    event.stopPropagation();\r\n    if (this.props.dispatchFunction) {\r\n      this.props.dispatchFunction({\r\n        type: ActionType.upsert,\r\n        values: [new Settings(\"\")],\r\n        names: [Settings.name],\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <button\r\n        className=\"btn btn-dark reset-button-wrapper\"\r\n        onClick={this.resetSettings.bind(this)}\r\n      >\r\n        {/* <i className=\"material-icons reset-button-icon\">refresh</i> */}\r\n        Reset\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedResetButton = connect(\r\n  null,\r\n  ResetButton.mapDispatchToProps\r\n)(ResetButton);\r\n\r\nexport default ConnectedResetButton;\r\n","import * as React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport \"./layout.scss\";\r\nimport { SaveElement } from \"global/store/store-init\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { connect } from \"react-redux\";\r\nimport { Settings, BooleanEnum } from \"global/types/settings\";\r\nimport ColumnView from \"components/column-view/column-view\";\r\nimport ConnectedResetButton from \"components/reset-button/reset-button\";\r\n\r\nclass SaveElementWrapper extends React.PureComponent {\r\n  public static saveElement = new SaveElement();\r\n  public static mapStateToProps(state: AppState): any {\r\n    SaveElementWrapper.saveElement.stateChanged(state);\r\n    return {};\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst ConnectedSaveElementWrapper = connect(SaveElementWrapper.mapStateToProps)(\r\n  SaveElementWrapper\r\n);\r\n\r\ninterface LayoutProps {\r\n  title: string;\r\n  iconName?: string;\r\n  applyDefaultColourToMainContent?: boolean;\r\n  //from redux:\r\n  settings?: Settings;\r\n  //intrisic to react:\r\n  children: any;\r\n}\r\n\r\ninterface LayoutState {\r\n  sideMenuExpanded: boolean;\r\n}\r\n\r\nclass Layout extends React.Component<LayoutProps, LayoutState> {\r\n  constructor(props: LayoutProps) {\r\n    super(props);\r\n\r\n    this.state = { sideMenuExpanded: false };\r\n  }\r\n  public static mapStateToProps(state: AppState): any {\r\n    return { settings: state.settings || new Settings(\"\") };\r\n  }\r\n\r\n  public setSideMenuExpanded(newValue: boolean): void {\r\n    this.setState({ sideMenuExpanded: newValue });\r\n  }\r\n\r\n  public changeSideMenuState(newValue: boolean, event: Event): void {\r\n    this.blockEventPropagation(event);\r\n    this.setState({ sideMenuExpanded: newValue });\r\n  }\r\n\r\n  public blockEventPropagation(event: Event): void {\r\n    event.stopPropagation();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return this.props.settings &&\r\n      this.props.settings.columnView === BooleanEnum.true\r\n      ? this.renderColumn()\r\n      : this.renderNormal();\r\n  }\r\n\r\n  public renderColumn(): JSX.Element {\r\n    return <ColumnView />;\r\n  }\r\n\r\n  public renderNormal(): JSX.Element {\r\n    const icon = this.props.iconName ? (\r\n      <i className=\"material-icons\">{this.props.iconName}</i>\r\n    ) : null;\r\n\r\n    const layoutWrapperStyle = this.props.settings\r\n      ? {\r\n          fontFamily: `${this.props.settings.fontFamily}, -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji`,\r\n          backgroundColor: `${this.props.settings.backgroundColour}`,\r\n          color: `${this.props.settings.textColour}`,\r\n        }\r\n      : undefined;\r\n\r\n    const expandableSideMenuCss =\r\n      this.props.settings.expandableSideMenu === BooleanEnum.true\r\n        ? \"layout-side-nav-expandable\"\r\n        : \"\";\r\n    const sideMenuExpandedCss = this.state.sideMenuExpanded\r\n      ? \"layout-side-nav-expanded\"\r\n      : \"layout-side-nav-collapsed\";\r\n\r\n    const sideMenuButton =\r\n      this.props.settings.expandableSideMenu === BooleanEnum.true ? (\r\n        <i\r\n          className=\"material-icons colour-red\"\r\n          onClick={this.changeSideMenuState.bind(this, true)}\r\n        >\r\n          menu\r\n        </i>\r\n      ) : null;\r\n\r\n    const sideNavBacking =\r\n      this.props.settings.expandableSideMenu === BooleanEnum.true ? (\r\n        <div\r\n          className={`layout-side-nav-backing ${sideMenuExpandedCss}`}\r\n          onClick={this.changeSideMenuState.bind(this, false)}\r\n        />\r\n      ) : null;\r\n\r\n    return (\r\n      <div\r\n        className=\"layout-wrapper\"\r\n        style={layoutWrapperStyle}\r\n        onClick={this.setSideMenuExpanded.bind(this, false)}\r\n      >\r\n        <ConnectedSaveElementWrapper />\r\n        {sideNavBacking}\r\n        <div\r\n          className={`layout-side-nav ${expandableSideMenuCss} ${sideMenuExpandedCss}`}\r\n          onClick={this.blockEventPropagation.bind(this)}\r\n        >\r\n          <div className=\"layout-side-nav-inner-wrapper\">\r\n            <div className=\"layout-top-block\">\r\n              <div className=\"layout-nav-title\">{icon}</div>\r\n            </div>\r\n            <div className=\"layout-link-list\">\r\n              <Link to=\"/\" onClick={this.setSideMenuExpanded.bind(this, false)}>\r\n                <i className=\"material-icons layout-link-icon\">menu</i>Main Page\r\n              </Link>\r\n              <Link\r\n                to=\"/animals/\"\r\n                onClick={this.setSideMenuExpanded.bind(this, false)}\r\n              >\r\n                <i className=\"material-icons layout-link-icon\">pets</i>Animals\r\n              </Link>\r\n              <Link\r\n                to=\"/exhibits/\"\r\n                onClick={this.setSideMenuExpanded.bind(this, false)}\r\n              >\r\n                <i className=\"material-icons layout-link-icon\">house_siding</i>\r\n                Exhibits\r\n              </Link>\r\n              <Link\r\n                to=\"/staff/\"\r\n                onClick={this.setSideMenuExpanded.bind(this, false)}\r\n              >\r\n                <i className=\"material-icons layout-link-icon\">person</i>Staff\r\n              </Link>\r\n              <Link\r\n                to=\"/options/\"\r\n                onClick={this.setSideMenuExpanded.bind(this, false)}\r\n              >\r\n                <i className=\"material-icons layout-link-icon\">edit</i>Options\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"layout-right-block\">\r\n          <div className=\"layout-top-block\">\r\n            <div className=\"layout-top-block-title\">\r\n              <div className=\"layout-title\">\r\n                <div className=\"layout-side-menu-button-wrapper\">\r\n                  {sideMenuButton}\r\n                </div>\r\n                <h1 className=\"display-5\">{this.props.title}</h1>\r\n              </div>\r\n              <ConnectedResetButton />\r\n            </div>\r\n          </div>\r\n          <div\r\n            className={`layout-main-content ${\r\n              this.props.applyDefaultColourToMainContent\r\n                ? \"default-colours\"\r\n                : \"\"\r\n            }`}\r\n          >\r\n            <div className=\"layout-main-content-padding\">\r\n              {this.props.children}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport const ConnectedLayout = connect(Layout.mapStateToProps)(Layout);\r\n\r\nexport default ConnectedLayout;\r\n"],"sourceRoot":""}