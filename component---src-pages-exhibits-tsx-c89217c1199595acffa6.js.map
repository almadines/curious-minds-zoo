{"version":3,"sources":["webpack:///./src/components/lists/exhibits-list.tsx","webpack:///./src/pages/exhibits.tsx","webpack:///./src/components/edit-page/edit-page.tsx"],"names":["ExhibitsListPage","props","getListElementWrapper","memoize","exhibits","linkDetailPages","listElems","Array","from","values","map","exhibit","ExhibitListElement","animalId","id","navigate","withPrefix","undefined","ExhibitListWrapper","state","createFormOpen","mapStateToProps","ownProps","filterByStaffId","filter","staffIds","includes","sort","a","b","name","setCreateFormOpenState","newState","this","setState","render","exhibitListWrapper","createFormContents","className","editorTemplate","Exhibit","getNewEditorTemplate","editMode","onCancelCallback","bind","onSuccessCallback","title","onClick","listElementWrapper","includeSearchFilter","tableMode","React","ConnectedExhibitsListPage","connect","ExhibitsPage","iconName","EditPage","dryRunResult","convertDataToObject","getInitialState","initialErrors","BaseType","currentData","errors","getEditorElements","forEach","elem","initialValue","identifier","onInputChange","newValue","newData","createObject","event","stopPropagation","result","dispatchFunction","reset","type","ActionType","add","names","dataTypeName","console","warn","cancel","mapDispatchToProps","dispatch","submitButton","cancelButton","editorElement","error","find","inputIdentifier","ConnectedEditPage"],"mappings":"wXA2BMA,E,oBAyBJ,WAAYC,GAA8B,aACxC,cAAMA,IAAN,MAtBKC,sBAAwBC,aAC7B,SAACC,EAAqBC,GACpB,IAMMC,EAAYC,MAAMC,KAAKJ,EAASK,UAAUC,KAC9C,SAACC,GAAD,OACE,IAAIC,IACFD,EACAN,GATJQ,EASiDF,EAAQG,GARxC,WACjBC,mBAASC,YAAW,uBAAuBH,WAOoBI,GAV9B,IACjCJ,KAaF,OAAO,IAAIK,IAAmBZ,KAhBI,KAuBpC,EAAKa,MAAQ,CAAEC,gBAAgB,GAFS,E,yFAK5BC,gBAAd,SACEF,EACAG,GAEA,IAAIlB,EAAWG,MAAMC,KAAKW,EAAMf,SAASK,UAWzC,OAVIa,EAASC,kBACXnB,EAAWA,EAASoB,QAAO,SAACb,GAAD,OACzBA,EAAQc,SAASC,SAASJ,EAASC,qBAQhC,CACLnB,SALFA,EAAWA,EAASuB,MAAK,SAACC,EAAYC,GAAb,OACvBD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,O,2BAQpBC,uBAAP,SAA8BC,GAC5BC,KAAKC,SAAS,CAAEd,eAAgBY,K,EAG3BG,OAAP,WACE,IAAMC,EAAqBH,KAAK/B,sBAC9B+B,KAAKhC,MAAMG,SACX6B,KAAKhC,MAAMI,iBAGPgC,EAAuBJ,KAAKd,MAAMC,eACtC,uBAAKkB,UAAU,uCACb,gBAAC,IAAD,CACEC,eAAgBC,IAAQC,uBACxBC,UAAU,EACVC,iBAAkBV,KAAKF,uBAAuBa,KAAKX,MAAM,GACzDY,kBAAmBZ,KAAKF,uBAAuBa,KAAKX,MAAM,GAC1Da,MAAM,oBAIV,0BACER,UAAU,8CACVS,QAASd,KAAKF,uBAAuBa,KAAKX,MAAM,IAFlD,kBAQF,OACE,uBAAKK,UAAU,yBACb,uBACEA,UAAS,sCACPL,KAAKd,MAAMC,eACP,mBACA,uBAGLiB,GAEH,uBAAKC,UAAU,iCACb,gBAAC,IAAD,CACEU,mBAAoBZ,EACpBa,qBAAqB,EACrBC,WAAW,O,GA9FQC,iBAyGhBC,EAHmBC,kBAAQrD,EAAiBqB,gBAAzBgC,CAChCrD,G,IC9HIsD,E,gLACJnB,OAAA,WACE,OACE,gBAAC,IAAD,CAAiBW,MAAM,YAAYS,SAAS,gBAC1C,gBAAC,EAAD,CAA2BlD,iBAAiB,M,GAJzB8C,aAUZG,a,iJCaTE,E,oBACJ,WAAmBvD,GAAwB,MAGnCwD,GAFN,cAAMxD,IAAN,MAE0BA,MAAMsC,eAAemB,oBAC7C,EAAKC,gBAAgB1D,IAEjB2D,EAAkBH,aAAwBI,IAE5C,GADAJ,EAPqC,OAUzC,EAAKtC,MAAQ,CACX2C,YAAa,EAAKH,gBAAgB1D,GAClC8D,OAAQH,GAZ+B,E,kHAgBpCD,gBAAP,SAAuB1D,GACrB,IAAM6D,EAAmB,GAQzB,OAPA7D,EAAMsC,eACHyB,oBACAC,SAAQ,SAACC,GACFA,EAAKC,eACTL,EAAYI,EAAKE,YAAcF,EAAKC,iBAGnCL,G,EAGFO,cAAP,SAAqBC,EAAkBF,GACrC,IAAMG,EAAU,OAAH,UAAQtC,KAAKd,MAAM2C,aAEhC,GADAS,EAAQH,GAAcE,GACjB,IAAQC,EAAStC,KAAKd,MAAM2C,aAAc,CAC7C,IAAML,EAAexB,KAAKhC,MAAMsC,eAAemB,oBAC7Ca,GAEIR,EAAWN,aAAwBI,IAA2B,GAAfJ,EAErDxB,KAAKC,SAAS,CAAE4B,YAAaS,EAASR,a,EAInCS,aAAP,SAAoBC,GAClBA,EAAMC,kBAEN,IAAMC,EAAS1C,KAAKhC,MAAMsC,eAAemB,oBACvCzB,KAAKd,MAAM2C,aAGTa,aAAkBd,IACdc,GAAU1C,KAAKhC,MAAM2E,kBACzB3C,KAAKhC,MAAMsC,eAAesC,QAC1B5C,KAAKhC,MAAM2E,iBAAiB,CAC1BE,KAAMC,IAAWC,IACjBvE,OAAQ,CAACkE,GACTM,MAAO,CAAChD,KAAKhC,MAAMsC,eAAe2C,gBAEpCjD,KAAKC,SAAS,CAAE4B,YAAa7B,KAAK0B,gBAAgB1B,KAAKhC,SAEnDgC,KAAKhC,MAAM4C,mBACbZ,KAAKhC,MAAM4C,qBAGbsC,QAAQC,KAAK,0DAGfnD,KAAKC,SAAS,CAAE6B,OAAQY,K,EAIrBU,OAAP,SAAcZ,GACZA,EAAMC,kBACNzC,KAAKhC,MAAMsC,eAAesC,QAC1B5C,KAAKC,SAAS,CAAE4B,YAAa7B,KAAK0B,gBAAgB1B,KAAKhC,SACjDgC,KAAKhC,MAAM0C,kBACfV,KAAKhC,MAAM0C,oB,EAIDtB,gBAAd,SAA8BF,GAC5B,MAAO,I,EAGKmE,mBAAd,SAAiCC,GAC/B,MAAO,CACLX,iBAAkBW,I,EAIfpD,OAAP,WAA6B,WACrBqD,EAAevD,KAAKhC,MAAMyC,SAC9B,0BACEJ,UAAU,mCACVS,QAASd,KAAKuC,aAAa5B,KAAKX,OAEhC,qBAAGK,UAAU,mCAAb,OAJF,UAME,KAEEmD,EAAexD,KAAKhC,MAAMyC,SAC9B,0BACEJ,UAAU,kCACVS,QAASd,KAAKoD,OAAOzC,KAAKX,OAE1B,qBAAGK,UAAU,mCAAb,SAJF,UAME,KAEEQ,EAAQb,KAAKhC,MAAM6C,MACvB,sBAAIR,UAAU,aAAaL,KAAKhC,MAAM6C,OACpC,KAEJ,OACE,uBAAKR,UAAU,gBACZQ,EACD,uBAAKR,UAAU,sBACZL,KAAKhC,MAAMsC,eAAeyB,oBAAoBtD,KAC7C,SAACgF,GACC,IAAMC,EAAQ,EAAKxE,MAAM4C,OAAO6B,MAC9B,SAACD,GAAD,OACEA,EAAME,kBAAoBH,EAActB,cAG5C,OAAOsB,EAAcvD,OACnB,EAAKlC,MAAMyC,SACX,EAAK2B,cAAczB,KAAK,GACxB+C,OAKR,uBAAKrD,UAAU,6BACZmD,EACAD,K,GArIYrC,iBA4IjB2C,EAAoBzC,kBACxBG,EAASnC,gBACTmC,EAAS8B,mBAFejC,CAGxBG,GAEasC","file":"component---src-pages-exhibits-tsx-c89217c1199595acffa6.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport memoize from \"memoize-one\";\r\nimport { AppState } from \"../../global/state/state\";\r\nimport ListDisplay from \"./list-display\";\r\nimport {\r\n  ExhibitListElement,\r\n  ListElementWrapper,\r\n  ExhibitListWrapper,\r\n} from \"global/types/list-element\";\r\nimport { Exhibit } from \"global/types/exhibit\";\r\nimport { isEqual } from \"lodash\";\r\nimport { navigate } from \"@reach/router\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport \"./instance-list-styles.scss\";\r\nimport { withPrefix } from \"gatsby\";\r\n\r\ninterface ExhibitsListPageProps {\r\n  exhibits?: Exhibit[];\r\n  filterByStaffId?: string;\r\n  linkDetailPages?: boolean;\r\n}\r\n\r\ninterface ExhibitsListPageState {\r\n  createFormOpen: boolean;\r\n}\r\n\r\nclass ExhibitsListPage extends React.PureComponent<\r\n  ExhibitsListPageProps,\r\n  ExhibitsListPageState\r\n> {\r\n  public getListElementWrapper = memoize(\r\n    (exhibits: Exhibit[], linkDetailPages): ListElementWrapper => {\r\n      const onClickCallbackConstructor = (\r\n        animalId: string\r\n      ): (() => void) => () => {\r\n        navigate(withPrefix(`/exhibit-details?id=${animalId}`));\r\n      };\r\n\r\n      const listElems = Array.from(exhibits.values()).map(\r\n        (exhibit: Exhibit): ExhibitListElement =>\r\n          new ExhibitListElement(\r\n            exhibit,\r\n            linkDetailPages ? onClickCallbackConstructor(exhibit.id) : undefined\r\n          )\r\n      );\r\n\r\n      return new ExhibitListWrapper(listElems);\r\n    },\r\n    isEqual\r\n  );\r\n\r\n  constructor(props: ExhibitsListPageProps) {\r\n    super(props);\r\n    this.state = { createFormOpen: false };\r\n  }\r\n\r\n  public static mapStateToProps(\r\n    state: AppState,\r\n    ownProps: ExhibitsListPageProps\r\n  ): any {\r\n    let exhibits = Array.from(state.exhibits.values());\r\n    if (ownProps.filterByStaffId) {\r\n      exhibits = exhibits.filter((exhibit: Exhibit): boolean =>\r\n        exhibit.staffIds.includes(ownProps.filterByStaffId)\r\n      );\r\n    }\r\n\r\n    exhibits = exhibits.sort((a: Exhibit, b: Exhibit): number =>\r\n      a.name > b.name ? 1 : -1\r\n    );\r\n\r\n    return {\r\n      exhibits,\r\n    };\r\n  }\r\n\r\n  public setCreateFormOpenState(newState: boolean): void {\r\n    this.setState({ createFormOpen: newState });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const exhibitListWrapper = this.getListElementWrapper(\r\n      this.props.exhibits,\r\n      this.props.linkDetailPages\r\n    );\r\n\r\n    const createFormContents = !!this.state.createFormOpen ? (\r\n      <div className=\"instance-list-create-form-container\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Exhibit.getNewEditorTemplate()}\r\n          editMode={true}\r\n          onCancelCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          onSuccessCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          title=\"Create Exhibit\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      <button\r\n        className=\"btn btn-success instance-list-create-button\"\r\n        onClick={this.setCreateFormOpenState.bind(this, true)}\r\n      >\r\n        Create Exhibit\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"instance-list-wrapper\">\r\n        <div\r\n          className={`instance-list-create-form-wrapper ${\r\n            this.state.createFormOpen\r\n              ? \"create-form-open\"\r\n              : \"create-form-closed\"\r\n          }`}\r\n        >\r\n          {createFormContents}\r\n        </div>\r\n        <div className=\"instance-list-content-wrapper\">\r\n          <ListDisplay\r\n            listElementWrapper={exhibitListWrapper}\r\n            includeSearchFilter={true}\r\n            tableMode={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedExhibitsListPage = connect(ExhibitsListPage.mapStateToProps)(\r\n  ExhibitsListPage\r\n);\r\nexport default ConnectedExhibitsListPage;\r\n","import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedExhibitsListPage from \"components/lists/exhibits-list\";\r\n\r\nclass ExhibitsPage extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Exhibits:\" iconName=\"house_siding\">\r\n        <ConnectedExhibitsListPage linkDetailPages={true} />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExhibitsPage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface EditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  onCancelCallback?: () => void;\r\n  onSuccessCallback?: () => void;\r\n  title?: string;\r\n  autoUpdateOnChange?: boolean; // NOTE: hides the submit and cancel buttons and causes the success and cancel callbacks to be ignored.\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface EditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass EditPage extends React.PureComponent<EditorPageProps, EditorPageState> {\r\n  public constructor(props: EditorPageProps) {\r\n    super(props);\r\n\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: EditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n    }\r\n  }\r\n\r\n  public createObject(event: Event): void {\r\n    event.stopPropagation();\r\n\r\n    const result = this.props.editorTemplate.convertDataToObject(\r\n      this.state.currentData\r\n    );\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n\r\n        if (this.props.onSuccessCallback) {\r\n          this.props.onSuccessCallback();\r\n        }\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public cancel(event: Event): void {\r\n    event.stopPropagation();\r\n    this.props.editorTemplate.reset(); // replace later with callback function!\r\n    this.setState({ currentData: this.getInitialState(this.props) });\r\n    if (!!this.props.onCancelCallback) {\r\n      this.props.onCancelCallback();\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const submitButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-success edit-page-button\"\r\n        onClick={this.createObject.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">add</i>Submit\r\n      </button>\r\n    ) : null;\r\n\r\n    const cancelButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-danger edit-page-button\"\r\n        onClick={this.cancel.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">close</i>Cancel\r\n      </button>\r\n    ) : null;\r\n\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n        <div className=\"edit-page-buttons-wrapper\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedEditPage = connect(\r\n  EditPage.mapStateToProps,\r\n  EditPage.mapDispatchToProps\r\n)(EditPage);\r\n\r\nexport default ConnectedEditPage;\r\n"],"sourceRoot":""}