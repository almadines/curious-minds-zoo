{"version":3,"sources":["webpack:///./src/pages/staff-create.tsx","webpack:///./src/components/edit-page/edit-page.tsx"],"names":["StaffCreatePage","render","title","iconName","editorTemplate","Staff","getNewEditorTemplate","editMode","React","EditPage","props","dryRunResult","convertDataToObject","getInitialState","initialErrors","BaseType","state","currentData","errors","getEditorElements","forEach","elem","initialValue","identifier","onInputChange","newValue","newData","this","setState","createObject","event","stopPropagation","result","dispatchFunction","reset","type","ActionType","add","values","names","dataTypeName","onSuccessCallback","console","warn","cancel","onCancelCallback","mapStateToProps","mapDispatchToProps","dispatch","submitButton","className","onClick","bind","cancelButton","map","editorElement","error","find","inputIdentifier","ConnectedEditPage","connect"],"mappings":"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","file":"component---src-pages-staff-create-tsx-f0a0d3a19a61829d8152.js","sourcesContent":["import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport { Staff } from \"global/types/staff\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\n\r\nclass StaffCreatePage extends React.PureComponent {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Create Staff\" iconName=\"person\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Staff.getNewEditorTemplate()}\r\n          editMode={true}\r\n        />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StaffCreatePage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface EditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  onCancelCallback?: () => void;\r\n  onSuccessCallback?: () => void;\r\n  title?: string;\r\n  autoUpdateOnChange?: boolean; // NOTE: hides the submit and cancel buttons and causes the success and cancel callbacks to be ignored.\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface EditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass EditPage extends React.PureComponent<EditorPageProps, EditorPageState> {\r\n  public constructor(props: EditorPageProps) {\r\n    super(props);\r\n\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: EditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n    }\r\n  }\r\n\r\n  public createObject(event: Event): void {\r\n    event.stopPropagation();\r\n\r\n    const result = this.props.editorTemplate.convertDataToObject(\r\n      this.state.currentData\r\n    );\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n\r\n        if (this.props.onSuccessCallback) {\r\n          this.props.onSuccessCallback();\r\n        }\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public cancel(event: Event): void {\r\n    event.stopPropagation();\r\n    this.props.editorTemplate.reset(); // replace later with callback function!\r\n    this.setState({ currentData: this.getInitialState(this.props) });\r\n    if (!!this.props.onCancelCallback) {\r\n      this.props.onCancelCallback();\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const submitButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-success edit-page-button\"\r\n        onClick={this.createObject.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">add</i>Submit\r\n      </button>\r\n    ) : null;\r\n\r\n    const cancelButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-danger edit-page-button\"\r\n        onClick={this.cancel.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">close</i>Cancel\r\n      </button>\r\n    ) : null;\r\n\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n        <div className=\"edit-page-buttons-wrapper\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedEditPage = connect(\r\n  EditPage.mapStateToProps,\r\n  EditPage.mapDispatchToProps\r\n)(EditPage);\r\n\r\nexport default ConnectedEditPage;\r\n"],"sourceRoot":""}