{"version":3,"sources":["webpack:///./src/components/edit-page/auto-update-edit-page.tsx","webpack:///./src/components/detail-page/settings-editor-page.tsx","webpack:///./src/pages/index.tsx"],"names":["AutoUpdateEditPage","props","dryRunResult","editorTemplate","convertDataToObject","getInitialState","initialErrors","BaseType","state","currentData","errors","getEditorElements","forEach","elem","initialValue","identifier","onInputChange","newValue","newData","this","setState","createObject","result","dispatchFunction","reset","type","ActionType","add","values","names","dataTypeName","console","warn","mapStateToProps","mapDispatchToProps","dispatch","render","title","className","map","editorElement","error","find","inputIdentifier","editMode","bind","React","ConnectedAutoUpdateEditPage","connect","SettingsEditorPage","settings","getEditorTemplate","Settings","getNewEditorTemplate","ConnectedSettingsEditorPage","Home","iconName"],"mappings":"0OAwBMA,E,oBAIJ,WAAmBC,GAAkC,MAE7CC,GADN,cAAMD,IAAN,MAC0BA,MAAME,eAAeC,oBAC7C,EAAKC,gBAAgBJ,IAEjBK,EAAkBJ,aAAwBK,IAE5C,GADAL,EAN+C,OASnD,EAAKM,MAAQ,CACXC,YAAa,EAAKJ,gBAAgBJ,GAClCS,OAAQJ,GAXyC,E,kHAe9CD,gBAAP,SAAuBJ,GACrB,IAAMQ,EAAmB,GAQzB,OAPAR,EAAME,eACHQ,oBACAC,SAAQ,SAACC,GACFA,EAAKC,eACTL,EAAYI,EAAKE,YAAcF,EAAKC,iBAGnCL,G,EAGFO,cAAP,SAAqBC,EAAkBF,GACrC,IAAMG,EAAU,OAAH,UAAQC,KAAKX,MAAMC,aAEhC,GADAS,EAAQH,GAAcE,GACjB,IAAQC,EAASC,KAAKX,MAAMC,aAAc,CAC7C,IAAMP,EAAeiB,KAAKlB,MAAME,eAAeC,oBAC7Cc,GAEIR,EAAWR,aAAwBK,IAA2B,GAAfL,EAErDiB,KAAKC,SAAS,CAAEX,YAAaS,EAASR,WACtCS,KAAKE,aAAaH,K,EAIfG,aAAP,SAAoBZ,GAClB,IAAMa,EAASH,KAAKlB,MAAME,eAAeC,oBAAoBK,GAEzDa,aAAkBf,IACde,GAAUH,KAAKlB,MAAMsB,kBACzBJ,KAAKlB,MAAME,eAAeqB,QAC1BL,KAAKlB,MAAMsB,iBAAiB,CAC1BE,KAAMC,IAAWC,IACjBC,OAAQ,CAACN,GACTO,MAAO,CAACV,KAAKlB,MAAME,eAAe2B,gBAEpCX,KAAKC,SAAS,CAAEX,YAAaU,KAAKd,gBAAgBc,KAAKlB,UAEvD8B,QAAQC,KAAK,0DAGfb,KAAKC,SAAS,CAAEV,OAAQY,K,EAIdW,gBAAd,SAA8BzB,GAC5B,MAAO,I,EAGK0B,mBAAd,SAAiCC,GAC/B,MAAO,CACLZ,iBAAkBY,I,EAIfC,OAAP,WAA6B,WACrBC,EAAQlB,KAAKlB,MAAMoC,MACvB,sBAAIC,UAAU,aAAanB,KAAKlB,MAAMoC,OACpC,KAEJ,OACE,uBAAKC,UAAU,gBACZD,EACD,uBAAKC,UAAU,sBACZnB,KAAKlB,MAAME,eAAeQ,oBAAoB4B,KAC7C,SAACC,GACC,IAAMC,EAAQ,EAAKjC,MAAME,OAAOgC,MAC9B,SAACD,GAAD,OACEA,EAAME,kBAAoBH,EAAczB,cAG5C,OAAOyB,EAAcJ,OACnB,EAAKnC,MAAM2C,SACX,EAAK5B,cAAc6B,KAAK,GACxBJ,S,GA9FiBK,iBA6GlBC,EALqBC,kBAClChD,EAAmBiC,gBACnBjC,EAAmBkC,mBAFec,CAGlChD,G,ICvHIiD,E,oBACJ,WAAmBhD,GAA0B,OAC3C,YAAMA,IADqC,K,gGAI/BgC,gBAAd,SAA8BzB,GAC5B,OAAOA,EAAM0C,SACT,CAAE/C,eAAgBK,EAAM0C,SAASC,qBACjCC,IAASC,sB,YAGRjB,OAAP,WACE,OAAKjB,KAAKlB,MAAME,eAKd,uBAAKmC,UAAU,2BACb,gBAAC,EAAD,CACEnC,eAAgBgB,KAAKlB,MAAME,eAC3ByC,UAAU,MAPdb,QAAQU,MAAM,8BACP,O,GAdoBK,iBA+BlBQ,EAJqBN,kBAAQC,EAAmBhB,gBAA3Be,CAClCC,G,ICpCIM,E,gLACJnB,OAAA,WACE,OACE,gBAAC,IAAD,CAAiBC,MAAM,YAAYmB,SAAS,QAC1C,uBAAKlB,UAAU,wBAAf,mEAEE,gBAAC,EAAD,S,GANSQ,aAaJS","file":"component---src-pages-index-tsx-a6ef42f85d5007d81102.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface AutoUpdateEditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  title?: string;\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface AutoUpdateEditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass AutoUpdateEditPage extends React.PureComponent<\r\n  AutoUpdateEditorPageProps,\r\n  AutoUpdateEditorPageState\r\n> {\r\n  public constructor(props: AutoUpdateEditorPageProps) {\r\n    super(props);\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: AutoUpdateEditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n      this.createObject(newData);\r\n    }\r\n  }\r\n\r\n  public createObject(currentData: any): void {\r\n    const result = this.props.editorTemplate.convertDataToObject(currentData);\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedAutoUpdateEditPage = connect(\r\n  AutoUpdateEditPage.mapStateToProps,\r\n  AutoUpdateEditPage.mapDispatchToProps\r\n)(AutoUpdateEditPage);\r\n\r\nexport default ConnectedAutoUpdateEditPage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport { Settings } from \"global/types/settings\";\r\nimport ConnectedAutoUpdateEditPage from \"components/edit-page/auto-update-edit-page\";\r\n\r\ninterface SettingsPageProps {\r\n  //redux\r\n  editorTemplate?: EditorTemplate;\r\n}\r\n\r\nclass SettingsEditorPage extends React.PureComponent<SettingsPageProps> {\r\n  public constructor(props: SettingsPageProps) {\r\n    super(props);\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return state.settings\r\n      ? { editorTemplate: state.settings.getEditorTemplate() }\r\n      : Settings.getNewEditorTemplate;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    if (!this.props.editorTemplate) {\r\n      console.error(\"No editor template! Error!\");\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"settings-editor-wrapper\">\r\n        <ConnectedAutoUpdateEditPage\r\n          editorTemplate={this.props.editorTemplate}\r\n          editMode={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedSettingsEditorPage = connect(SettingsEditorPage.mapStateToProps)(\r\n  SettingsEditorPage\r\n);\r\n\r\nexport default ConnectedSettingsEditorPage;\r\n","import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedSettingsEditorPage from \"components/detail-page/settings-editor-page\";\r\n\r\nclass Home extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Main Page\" iconName=\"menu\">\r\n        <div className=\"main-content-margins\">\r\n          This is a simplified zoo management application, please explore.\r\n          <ConnectedSettingsEditorPage />\r\n        </div>\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}