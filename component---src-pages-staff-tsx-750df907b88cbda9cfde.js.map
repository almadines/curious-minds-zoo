{"version":3,"sources":["webpack:///./src/components/lists/staff-list.tsx","webpack:///./src/pages/staff.tsx","webpack:///./src/components/edit-page/edit-page.tsx"],"names":["StaffListPage","props","getListElementWrapper","memoize","staff","listElems","Array","from","values","map","StaffListElement","staffId","id","navigate","withPrefix","StaffListWrapper","state","createFormOpen","mapStateToProps","setCreateFormOpenState","newState","this","setState","render","staffListWrapper","createFormContents","className","editorTemplate","Staff","getNewEditorTemplate","editMode","onCancelCallback","bind","onSuccessCallback","title","onClick","listElementWrapper","includeSearchFilter","tableMode","React","ConnectedStaffListPage","connect","StaffPage","iconName","linkDetailPages","EditPage","dryRunResult","convertDataToObject","getInitialState","initialErrors","BaseType","currentData","errors","getEditorElements","forEach","elem","initialValue","identifier","onInputChange","newValue","newData","createObject","event","stopPropagation","result","dispatchFunction","reset","type","ActionType","add","names","dataTypeName","console","warn","cancel","mapDispatchToProps","dispatch","submitButton","cancelButton","editorElement","error","find","inputIdentifier","ConnectedEditPage"],"mappings":"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","file":"component---src-pages-staff-tsx-750df907b88cbda9cfde.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport memoize from \"memoize-one\";\r\nimport { AppState } from \"../../global/state/state\";\r\nimport ListDisplay from \"./list-display\";\r\nimport {\r\n  StaffListElement,\r\n  ListElementWrapper,\r\n  StaffListWrapper,\r\n} from \"global/types/list-element\";\r\nimport { isEqual } from \"lodash\";\r\nimport { Staff } from \"global/types/staff\";\r\nimport { navigate } from \"@reach/router\";\r\nimport \"./instance-list-styles.scss\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport { withPrefix } from \"gatsby\";\r\n\r\ninterface StaffListPageProps {\r\n  staff?: Map<string, Staff>;\r\n  linkDetailPages?: boolean;\r\n}\r\n\r\ninterface ExhibitsListPageState {\r\n  createFormOpen: boolean;\r\n}\r\n\r\nclass StaffListPage extends React.PureComponent<\r\n  StaffListPageProps,\r\n  ExhibitsListPageState\r\n> {\r\n  public getListElementWrapper = memoize(\r\n    (staff: Map<string, Staff>): ListElementWrapper => {\r\n      const onClickCallbackConstructor = (\r\n        staffId: string\r\n      ): (() => void) => () => {\r\n        navigate(withPrefix(`/staff-details?id=${staffId}`));\r\n      };\r\n      const listElems = Array.from(staff.values()).map(\r\n        (staff: Staff): StaffListElement =>\r\n          new StaffListElement(staff, onClickCallbackConstructor(staff.id))\r\n      );\r\n      return new StaffListWrapper(listElems);\r\n    },\r\n    isEqual\r\n  );\r\n\r\n  constructor(props: StaffListPageProps) {\r\n    super(props);\r\n    this.state = { createFormOpen: false };\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {\r\n      staff: state.staff,\r\n    };\r\n  }\r\n\r\n  public setCreateFormOpenState(newState: boolean): void {\r\n    this.setState({ createFormOpen: newState });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const staffListWrapper = this.getListElementWrapper(this.props.staff);\r\n\r\n    const createFormContents = !!this.state.createFormOpen ? (\r\n      <div className=\"instance-list-create-form-container\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Staff.getNewEditorTemplate()}\r\n          editMode={true}\r\n          onCancelCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          onSuccessCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          title=\"Register Staff\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      <button\r\n        className=\"btn btn-success instance-list-create-button\"\r\n        onClick={this.setCreateFormOpenState.bind(this, true)}\r\n      >\r\n        Register Staff\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"instance-list-wrapper\">\r\n        <div\r\n          className={`instance-list-create-form-wrapper ${\r\n            this.state.createFormOpen\r\n              ? \"create-form-open\"\r\n              : \"create-form-closed\"\r\n          }`}\r\n        >\r\n          {createFormContents}\r\n        </div>\r\n        <div className=\"instance-list-content-wrapper\">\r\n          <ListDisplay\r\n            listElementWrapper={staffListWrapper}\r\n            includeSearchFilter={true}\r\n            tableMode={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedStaffListPage = connect(StaffListPage.mapStateToProps)(\r\n  StaffListPage\r\n);\r\nexport default ConnectedStaffListPage;\r\n","import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedStaffListPage from \"components/lists/staff-list\";\r\n\r\nclass StaffPage extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Staff:\" iconName=\"person\">\r\n        <ConnectedStaffListPage linkDetailPages={true} />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StaffPage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface EditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  onCancelCallback?: () => void;\r\n  onSuccessCallback?: () => void;\r\n  title?: string;\r\n  autoUpdateOnChange?: boolean; // NOTE: hides the submit and cancel buttons and causes the success and cancel callbacks to be ignored.\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface EditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass EditPage extends React.PureComponent<EditorPageProps, EditorPageState> {\r\n  public constructor(props: EditorPageProps) {\r\n    super(props);\r\n\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: EditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n    }\r\n  }\r\n\r\n  public createObject(event: Event): void {\r\n    event.stopPropagation();\r\n\r\n    const result = this.props.editorTemplate.convertDataToObject(\r\n      this.state.currentData\r\n    );\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n\r\n        if (this.props.onSuccessCallback) {\r\n          this.props.onSuccessCallback();\r\n        }\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public cancel(event: Event): void {\r\n    event.stopPropagation();\r\n    this.props.editorTemplate.reset(); // replace later with callback function!\r\n    this.setState({ currentData: this.getInitialState(this.props) });\r\n    if (!!this.props.onCancelCallback) {\r\n      this.props.onCancelCallback();\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const submitButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-success edit-page-button\"\r\n        onClick={this.createObject.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">add</i>Submit\r\n      </button>\r\n    ) : null;\r\n\r\n    const cancelButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-danger edit-page-button\"\r\n        onClick={this.cancel.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">close</i>Cancel\r\n      </button>\r\n    ) : null;\r\n\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n        <div className=\"edit-page-buttons-wrapper\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedEditPage = connect(\r\n  EditPage.mapStateToProps,\r\n  EditPage.mapDispatchToProps\r\n)(EditPage);\r\n\r\nexport default ConnectedEditPage;\r\n"],"sourceRoot":""}