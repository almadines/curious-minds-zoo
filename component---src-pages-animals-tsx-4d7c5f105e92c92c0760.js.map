{"version":3,"sources":["webpack:///./src/components/lists/animals-list.tsx","webpack:///./src/pages/animals.tsx"],"names":["AnimalsListPage","props","getListElementWrapper","memoize","animals","linkDetailPages","listElems","Array","from","values","map","animal","AnimalListElement","animalId","id","navigate","undefined","AnimalListWrapper","state","createFormOpen","mapStateToProps","ownProps","animalIds","keys","filterByIdList","currentIds","filterList","includeFilterList","animalIdsInMap","Map","forEach","set","filter","has","notAssignedToExhibit","concat","exhibits","exhibit","staffId","staff","get","console","warn","exhibitId","sort","a","b","name","length","setCreateFormOpenState","newState","this","setState","render","animalListElementWrapper","createFormContents","className","editorTemplate","Animal","getNewEditorTemplate","editMode","onCancelCallback","bind","onSuccessCallback","title","onClick","listElementWrapper","includeSearchFilter","tableMode","React","ConnectedAnimalsListPage","connect","AnimalsPage"],"mappings":"ilCA6BMA,E,oBAyBJ,WAAYC,GAA6B,aACvC,cAAMA,IAAN,MAtBKC,sBAAwBC,aAC7B,SAACC,EAAmBC,GAClB,IAMMC,EAAYC,MAAMC,KAAKJ,EAAQK,UAAUC,KAC7C,SAACC,GAAD,OACE,IAAIC,IACFD,EACAN,GATJQ,EASiDF,EAAOG,GARvC,WACjBC,mBAAS,sBAAsBF,UAO+BG,GAV7B,IACjCH,KAaF,OAAO,IAAII,IAAkBX,KAhBK,KAuBpC,EAAKY,MAAQ,CAAEC,gBAAgB,GAFQ,E,yFAK3BC,gBAAd,SACEF,EACAG,GAEA,IAuBmC,EAvB/BC,EAAYf,MAAMC,KAAKU,EAAMd,QAAQmB,QAEnCC,EAAiB,SACrBC,EACAC,EACAC,QACa,IADbA,OAA6B,GAE7B,IAAMC,EAAiB,IAAIC,IAK3B,OAJAH,EAAWI,SAAQ,SAACjB,GAClBe,EAAeG,IAAIlB,EAAU,SAG3Bc,EACKF,EAAWO,QAAO,SAAClB,GAAD,OACvBc,EAAeK,IAAInB,MAGdW,EAAWO,QAChB,SAAClB,GAAD,OAA0Bc,EAAeK,IAAInB,OAK/CO,EAASa,uBAOXZ,EAAYE,EACVF,GAPoC,MAAgBa,OAAjB,UAChC5B,MAAMC,KAAKU,EAAMkB,SAAS3B,UAAUC,KACrC,SAAC2B,GAAD,OAAgCA,EAAQf,gBAO1C,IAIJ,GAAMD,EAASiB,QAAS,CACtB,IAAMC,EAAQrB,EAAMqB,MAAMC,IAAInB,EAASiB,SACjCC,EACJjB,EAAYE,EAAeF,EAAWiB,EAAMjB,WAAW,GAEvDmB,QAAQC,KACN,qEAKN,GAAMrB,EAASsB,UAAW,CACxB,IAAMN,EAAUnB,EAAMkB,SAASI,IAAInB,EAASsB,WACtCN,EACJf,EAAYE,EAAeF,EAAWe,EAAQf,WAAW,GAEzDmB,QAAQC,KACN,uEAKN,IAAMtC,EAAUkB,EACbZ,KAAI,SAACI,GAAD,OAAoCI,EAAMd,QAAQoC,IAAI1B,MAC1DkB,QAAO,SAACrB,GAAD,QAAwCA,KAC/CiC,MAAK,SAACC,EAAWC,GAAZ,OAAmCD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,KAQlE,OANI3C,EAAQ4C,SAAW1B,EAAU0B,QAC/BP,QAAQC,KACN,qEAIG,CACLtC,Y,2BAIG6C,uBAAP,SAA8BC,GAC5BC,KAAKC,SAAS,CAAEjC,eAAgB+B,K,EAG3BG,OAAP,WACE,IAAMC,EAA2BH,KAAKjD,sBACpCiD,KAAKlD,MAAMG,QACX+C,KAAKlD,MAAMI,iBAGPkD,EAAuBJ,KAAKjC,MAAMC,eACtC,uBAAKqC,UAAU,uCACb,gBAAC,IAAD,CACEC,eAAgBC,IAAOC,uBACvBC,UAAU,EACVC,iBAAkBV,KAAKF,uBAAuBa,KAAKX,MAAM,GACzDY,kBAAmBZ,KAAKF,uBAAuBa,KAAKX,MAAM,GAC1Da,MAAM,mBAIV,0BACER,UAAU,8CACVS,QAASd,KAAKF,uBAAuBa,KAAKX,MAAM,IAFlD,iBAQF,OACE,uBAAKK,UAAU,yBACb,uBACEA,UAAS,sCACPL,KAAKjC,MAAMC,eACP,mBACA,uBAGLoC,GAGH,uBAAKC,UAAU,iCACb,gBAAC,IAAD,CACEU,mBAAoBZ,EACpBa,qBAAqB,EACrBC,WAAW,O,GA1JOC,iBAqKfC,EAHkBC,kBAAQvE,EAAgBoB,gBAAxBmD,CAC/BvE,G,IC5LIwE,E,gLACGnB,OAAP,WACE,OACE,gBAAC,IAAD,CAAQW,MAAM,YACZ,gBAAC,EAAD,CAA0B3D,iBAAiB,M,GAJzBgE,iBAUXG","file":"component---src-pages-animals-tsx-4d7c5f105e92c92c0760.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport memoize from \"memoize-one\";\r\nimport { Animal } from \"global/types/animals\";\r\nimport { AppState } from \"global/state/state\";\r\nimport {\r\n  AnimalListElement,\r\n  ListElementWrapper,\r\n  AnimalListWrapper,\r\n} from \"global/types/list-element\";\r\nimport ListDisplay from \"./list-display\";\r\nimport { isEqual } from \"lodash\";\r\nimport { Exhibit } from \"global/types/exhibit\";\r\nimport { navigate } from \"@reach/router\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport \"./instance-list-styles.scss\";\r\n\r\ninterface AnimalsListPageProps {\r\n  animals?: Animal[]; // from redux\r\n  notAssignedToExhibit?: boolean;\r\n  exhibitId?: string;\r\n  staffId?: string;\r\n  linkDetailPages?: boolean;\r\n}\r\n\r\ninterface AnimalsListPageState {\r\n  createFormOpen: boolean;\r\n}\r\n\r\nclass AnimalsListPage extends React.PureComponent<\r\n  AnimalsListPageProps,\r\n  AnimalsListPageState\r\n> {\r\n  public getListElementWrapper = memoize(\r\n    (animals: Animal[], linkDetailPages: boolean): ListElementWrapper => {\r\n      const onClickCallbackConstructor = (\r\n        animalId: string\r\n      ): (() => void) => () => {\r\n        navigate(`/animal-details?id=${animalId}`);\r\n      };\r\n\r\n      const listElems = Array.from(animals.values()).map(\r\n        (animal: Animal): AnimalListElement =>\r\n          new AnimalListElement(\r\n            animal,\r\n            linkDetailPages ? onClickCallbackConstructor(animal.id) : undefined\r\n          )\r\n      );\r\n\r\n      return new AnimalListWrapper(listElems);\r\n    },\r\n    isEqual\r\n  );\r\n\r\n  constructor(props: AnimalsListPageProps) {\r\n    super(props);\r\n    this.state = { createFormOpen: false };\r\n  }\r\n\r\n  public static mapStateToProps(\r\n    state: AppState,\r\n    ownProps: AnimalsListPageProps\r\n  ): any {\r\n    let animalIds = Array.from(state.animals.keys());\r\n\r\n    const filterByIdList = (\r\n      currentIds: string[],\r\n      filterList: string[],\r\n      includeFilterList: boolean = false\r\n    ): string[] => {\r\n      const animalIdsInMap = new Map<string, void>();\r\n      filterList.forEach((animalId: string): void => {\r\n        animalIdsInMap.set(animalId, null);\r\n      });\r\n\r\n      if (includeFilterList) {\r\n        return currentIds.filter((id: string): boolean =>\r\n          animalIdsInMap.has(id)\r\n        );\r\n      } else {\r\n        return currentIds.filter(\r\n          (id: string): boolean => !animalIdsInMap.has(id)\r\n        );\r\n      }\r\n    };\r\n\r\n    if (ownProps.notAssignedToExhibit) {\r\n      const animalIdsAssignedToAnExhibit = ([] as string[]).concat(\r\n        ...Array.from(state.exhibits.values()).map(\r\n          (exhibit: Exhibit): string[] => exhibit.animalIds\r\n        )\r\n      );\r\n\r\n      animalIds = filterByIdList(\r\n        animalIds,\r\n        animalIdsAssignedToAnExhibit,\r\n        false\r\n      );\r\n    }\r\n\r\n    if (!!ownProps.staffId) {\r\n      const staff = state.staff.get(ownProps.staffId);\r\n      if (!!staff) {\r\n        animalIds = filterByIdList(animalIds, staff.animalIds, true);\r\n      } else {\r\n        console.warn(\r\n          \"Staff Id provided to AnimalsList does not exist, ignoring filter!\"\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!!ownProps.exhibitId) {\r\n      const exhibit = state.exhibits.get(ownProps.exhibitId);\r\n      if (!!exhibit) {\r\n        animalIds = filterByIdList(animalIds, exhibit.animalIds, true);\r\n      } else {\r\n        console.warn(\r\n          \"Exhibit Id provided to AnimalsList does not exist, ignoring filter!\"\r\n        );\r\n      }\r\n    }\r\n\r\n    const animals = animalIds\r\n      .map((id: string): Animal | undefined => state.animals.get(id))\r\n      .filter((animal: Animal): animal is Animal => !!animal)\r\n      .sort((a: Animal, b: Animal): number => (a.name > b.name ? 1 : -1));\r\n\r\n    if (animals.length !== animalIds.length) {\r\n      console.warn(\r\n        \"could not find all animal Ids, there may be some entries missing!\"\r\n      );\r\n    }\r\n\r\n    return {\r\n      animals,\r\n    };\r\n  }\r\n\r\n  public setCreateFormOpenState(newState: boolean): void {\r\n    this.setState({ createFormOpen: newState });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const animalListElementWrapper = this.getListElementWrapper(\r\n      this.props.animals,\r\n      this.props.linkDetailPages\r\n    );\r\n\r\n    const createFormContents = !!this.state.createFormOpen ? (\r\n      <div className=\"instance-list-create-form-container\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Animal.getNewEditorTemplate()}\r\n          editMode={true}\r\n          onCancelCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          onSuccessCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          title=\"Create Animal\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      <button\r\n        className=\"btn btn-success instance-list-create-button\"\r\n        onClick={this.setCreateFormOpenState.bind(this, true)}\r\n      >\r\n        Create Animal\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"instance-list-wrapper\">\r\n        <div\r\n          className={`instance-list-create-form-wrapper ${\r\n            this.state.createFormOpen\r\n              ? \"create-form-open\"\r\n              : \"create-form-closed\"\r\n          }`}\r\n        >\r\n          {createFormContents}\r\n        </div>\r\n\r\n        <div className=\"instance-list-content-wrapper\">\r\n          <ListDisplay\r\n            listElementWrapper={animalListElementWrapper}\r\n            includeSearchFilter={true}\r\n            tableMode={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedAnimalsListPage = connect(AnimalsListPage.mapStateToProps)(\r\n  AnimalsListPage\r\n);\r\nexport default ConnectedAnimalsListPage;\r\n","import * as React from \"react\";\r\nimport { Layout } from \"../components/layout/layout\";\r\nimport ConnectedAnimalsListPage from \"../components/lists/animals-list\";\r\n\r\nclass AnimalsPage extends React.PureComponent {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Layout title=\"Animals:\">\r\n        <ConnectedAnimalsListPage linkDetailPages={true} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimalsPage;\r\n"],"sourceRoot":""}