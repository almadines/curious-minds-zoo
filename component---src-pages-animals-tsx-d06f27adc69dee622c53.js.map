{"version":3,"sources":["webpack:///./src/components/lists/animals-list.tsx","webpack:///./src/pages/animals.tsx","webpack:///./src/components/edit-page/edit-page.tsx"],"names":["AnimalsListPage","props","getListElementWrapper","memoize","animals","linkDetailPages","listElems","Array","from","values","map","animal","AnimalListElement","animalId","id","navigate","withPrefix","undefined","AnimalListWrapper","state","createFormOpen","mapStateToProps","ownProps","animalIds","keys","filterByIdList","currentIds","filterList","includeFilterList","animalIdsInMap","Map","forEach","set","filter","has","notAssignedToExhibit","concat","exhibits","exhibit","staffId","staff","get","console","warn","exhibitId","sort","a","b","name","length","setCreateFormOpenState","newState","this","setState","render","animalListElementWrapper","createFormContents","className","editorTemplate","Animal","getNewEditorTemplate","editMode","onCancelCallback","bind","onSuccessCallback","title","onClick","listElementWrapper","includeSearchFilter","tableMode","React","ConnectedAnimalsListPage","connect","AnimalsPage","iconName","EditPage","dryRunResult","convertDataToObject","getInitialState","initialErrors","BaseType","currentData","errors","getEditorElements","elem","initialValue","identifier","onInputChange","newValue","newData","createObject","event","stopPropagation","result","dispatchFunction","reset","type","ActionType","add","names","dataTypeName","cancel","mapDispatchToProps","dispatch","submitButton","cancelButton","editorElement","error","find","inputIdentifier","ConnectedEditPage"],"mappings":"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","file":"component---src-pages-animals-tsx-d06f27adc69dee622c53.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport memoize from \"memoize-one\";\r\nimport { Animal } from \"global/types/animals\";\r\nimport { AppState } from \"global/state/state\";\r\nimport {\r\n  AnimalListElement,\r\n  ListElementWrapper,\r\n  AnimalListWrapper,\r\n} from \"global/types/list-element\";\r\nimport ListDisplay from \"./list-display\";\r\nimport { isEqual } from \"lodash\";\r\nimport { Exhibit } from \"global/types/exhibit\";\r\nimport { navigate } from \"@reach/router\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport \"./instance-list-styles.scss\";\r\nimport { withPrefix } from \"gatsby\";\r\n\r\ninterface AnimalsListPageProps {\r\n  animals?: Animal[]; // from redux\r\n  notAssignedToExhibit?: boolean;\r\n  exhibitId?: string;\r\n  staffId?: string;\r\n  linkDetailPages?: boolean;\r\n}\r\n\r\ninterface AnimalsListPageState {\r\n  createFormOpen: boolean;\r\n}\r\n\r\nclass AnimalsListPage extends React.PureComponent<\r\n  AnimalsListPageProps,\r\n  AnimalsListPageState\r\n> {\r\n  public getListElementWrapper = memoize(\r\n    (animals: Animal[], linkDetailPages: boolean): ListElementWrapper => {\r\n      const onClickCallbackConstructor = (\r\n        animalId: string\r\n      ): (() => void) => () => {\r\n        navigate(withPrefix(`/animal-details?id=${animalId}`));\r\n      };\r\n\r\n      const listElems = Array.from(animals.values()).map(\r\n        (animal: Animal): AnimalListElement =>\r\n          new AnimalListElement(\r\n            animal,\r\n            linkDetailPages ? onClickCallbackConstructor(animal.id) : undefined\r\n          )\r\n      );\r\n\r\n      return new AnimalListWrapper(listElems);\r\n    },\r\n    isEqual\r\n  );\r\n\r\n  constructor(props: AnimalsListPageProps) {\r\n    super(props);\r\n    this.state = { createFormOpen: false };\r\n  }\r\n\r\n  public static mapStateToProps(\r\n    state: AppState,\r\n    ownProps: AnimalsListPageProps\r\n  ): any {\r\n    let animalIds = Array.from(state.animals.keys());\r\n\r\n    const filterByIdList = (\r\n      currentIds: string[],\r\n      filterList: string[],\r\n      includeFilterList: boolean = false\r\n    ): string[] => {\r\n      const animalIdsInMap = new Map<string, void>();\r\n      filterList.forEach((animalId: string): void => {\r\n        animalIdsInMap.set(animalId, null);\r\n      });\r\n\r\n      if (includeFilterList) {\r\n        return currentIds.filter((id: string): boolean =>\r\n          animalIdsInMap.has(id)\r\n        );\r\n      } else {\r\n        return currentIds.filter(\r\n          (id: string): boolean => !animalIdsInMap.has(id)\r\n        );\r\n      }\r\n    };\r\n\r\n    if (ownProps.notAssignedToExhibit) {\r\n      const animalIdsAssignedToAnExhibit = ([] as string[]).concat(\r\n        ...Array.from(state.exhibits.values()).map(\r\n          (exhibit: Exhibit): string[] => exhibit.animalIds\r\n        )\r\n      );\r\n\r\n      animalIds = filterByIdList(\r\n        animalIds,\r\n        animalIdsAssignedToAnExhibit,\r\n        false\r\n      );\r\n    }\r\n\r\n    if (!!ownProps.staffId) {\r\n      const staff = state.staff.get(ownProps.staffId);\r\n      if (!!staff) {\r\n        animalIds = filterByIdList(animalIds, staff.animalIds, true);\r\n      } else {\r\n        console.warn(\r\n          \"Staff Id provided to AnimalsList does not exist, ignoring filter!\"\r\n        );\r\n      }\r\n    }\r\n\r\n    if (!!ownProps.exhibitId) {\r\n      const exhibit = state.exhibits.get(ownProps.exhibitId);\r\n      if (!!exhibit) {\r\n        animalIds = filterByIdList(animalIds, exhibit.animalIds, true);\r\n      } else {\r\n        console.warn(\r\n          \"Exhibit Id provided to AnimalsList does not exist, ignoring filter!\"\r\n        );\r\n      }\r\n    }\r\n\r\n    const animals = animalIds\r\n      .map((id: string): Animal | undefined => state.animals.get(id))\r\n      .filter((animal: Animal): animal is Animal => !!animal)\r\n      .sort((a: Animal, b: Animal): number => (a.name > b.name ? 1 : -1));\r\n\r\n    if (animals.length !== animalIds.length) {\r\n      console.warn(\r\n        \"could not find all animal Ids, there may be some entries missing!\"\r\n      );\r\n    }\r\n\r\n    return {\r\n      animals,\r\n    };\r\n  }\r\n\r\n  public setCreateFormOpenState(newState: boolean): void {\r\n    this.setState({ createFormOpen: newState });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const animalListElementWrapper = this.getListElementWrapper(\r\n      this.props.animals,\r\n      this.props.linkDetailPages\r\n    );\r\n\r\n    const createFormContents = !!this.state.createFormOpen ? (\r\n      <div className=\"instance-list-create-form-container\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Animal.getNewEditorTemplate()}\r\n          editMode={true}\r\n          onCancelCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          onSuccessCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          title=\"Create Animal\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      <button\r\n        className=\"btn btn-success instance-list-create-button\"\r\n        onClick={this.setCreateFormOpenState.bind(this, true)}\r\n      >\r\n        Add Animal\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"instance-list-wrapper\">\r\n        <div\r\n          className={`instance-list-create-form-wrapper ${\r\n            this.state.createFormOpen\r\n              ? \"create-form-open\"\r\n              : \"create-form-closed\"\r\n          }`}\r\n        >\r\n          {createFormContents}\r\n        </div>\r\n\r\n        <div className=\"instance-list-content-wrapper\">\r\n          <ListDisplay\r\n            listElementWrapper={animalListElementWrapper}\r\n            includeSearchFilter={true}\r\n            tableMode={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedAnimalsListPage = connect(AnimalsListPage.mapStateToProps)(\r\n  AnimalsListPage\r\n);\r\nexport default ConnectedAnimalsListPage;\r\n","import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedAnimalsListPage from \"../components/lists/animals-list\";\r\n\r\nclass AnimalsPage extends React.PureComponent {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <ConnectedLayout title=\"Animals:\" iconName=\"pets\">\r\n        <ConnectedAnimalsListPage linkDetailPages={true} />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AnimalsPage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface EditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  onCancelCallback?: () => void;\r\n  onSuccessCallback?: () => void;\r\n  title?: string;\r\n  autoUpdateOnChange?: boolean; // NOTE: hides the submit and cancel buttons and causes the success and cancel callbacks to be ignored.\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface EditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass EditPage extends React.PureComponent<EditorPageProps, EditorPageState> {\r\n  public constructor(props: EditorPageProps) {\r\n    super(props);\r\n\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: EditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n    }\r\n  }\r\n\r\n  public createObject(event: Event): void {\r\n    event.stopPropagation();\r\n\r\n    const result = this.props.editorTemplate.convertDataToObject(\r\n      this.state.currentData\r\n    );\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n\r\n        if (this.props.onSuccessCallback) {\r\n          this.props.onSuccessCallback();\r\n        }\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public cancel(event: Event): void {\r\n    event.stopPropagation();\r\n    this.props.editorTemplate.reset(); // replace later with callback function!\r\n    this.setState({ currentData: this.getInitialState(this.props) });\r\n    if (!!this.props.onCancelCallback) {\r\n      this.props.onCancelCallback();\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const submitButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-success edit-page-button\"\r\n        onClick={this.createObject.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">add</i>Submit\r\n      </button>\r\n    ) : null;\r\n\r\n    const cancelButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-danger edit-page-button\"\r\n        onClick={this.cancel.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">close</i>Cancel\r\n      </button>\r\n    ) : null;\r\n\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n        <div className=\"edit-page-buttons-wrapper\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedEditPage = connect(\r\n  EditPage.mapStateToProps,\r\n  EditPage.mapDispatchToProps\r\n)(EditPage);\r\n\r\nexport default ConnectedEditPage;\r\n"],"sourceRoot":""}