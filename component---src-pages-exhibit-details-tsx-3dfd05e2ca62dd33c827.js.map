{"version":3,"sources":["webpack:///./src/global/helper/extract-query-parameter.ts","webpack:///./src/components/detail-page/detail-page.tsx","webpack:///./src/components/detail-page/exhibit-detail-page.tsx","webpack:///./src/pages/exhibit-details.tsx","webpack:///./src/components/edit-page/edit-page.tsx"],"names":["getMemoizedIdFunction","memoizeOne","searchString","console","warn","key","splitStrings","replace","split","result","undefined","forEach","splitString","keyValuePair","DetailPage","props","state","isEditing","toggleEditMode","this","setState","setEditingState","newState","goBack","event","stopPropagation","returnPath","navigate","withPrefix","history","back","render","toggleEditingStateButton","className","onClick","bind","editorTemplate","editMode","onCancelCallback","onSuccessCallback","React","ExhibitDetailPage","mapStateToProps","ownProps","exhibits","get","id","getEditorTemplate","error","ConnectedExhibitDetailPage","connect","ExhibitDetailsPage","getId","queryData","location","search","title","iconName","allowEditing","EditPage","dryRunResult","convertDataToObject","getInitialState","initialErrors","BaseType","currentData","errors","getEditorElements","elem","initialValue","identifier","onInputChange","newValue","newData","createObject","dispatchFunction","reset","type","ActionType","add","values","names","dataTypeName","cancel","mapDispatchToProps","dispatch","submitButton","cancelButton","map","editorElement","find","inputIdentifier","ConnectedEditPage"],"mappings":"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","file":"component---src-pages-exhibit-details-tsx-3dfd05e2ca62dd33c827.js","sourcesContent":["import memoizeOne from \"memoize-one\";\r\nexport const extractQueryParameter = (\r\n  queryString: string,\r\n  key: string\r\n): string | undefined => {\r\n  const cleanedQueryString = queryString.replace(\"?\", \"\");\r\n  const splitStrings = cleanedQueryString.split(\"&&\");\r\n\r\n  let result: string | undefined = undefined;\r\n  splitStrings.forEach((splitString: string): void => {\r\n    const keyValuePair = splitString.split(\"=\");\r\n    if (keyValuePair[0] === key) {\r\n      result = keyValuePair[1];\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\nexport const getMemoizedIdFunction: () => (\r\n  searchString?: string\r\n) => string | undefined = () =>\r\n  memoizeOne((searchString?: string): string => {\r\n    if (!searchString) {\r\n      console.warn(\"No seach data found in props!\");\r\n    }\r\n\r\n    return !!searchString\r\n      ? extractQueryParameter(searchString, \"id\")\r\n      : undefined;\r\n  });\r\n","import * as React from \"react\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport \"./detail-page.scss\";\r\nimport { navigate } from \"@reach/router\";\r\nimport { withPrefix } from \"gatsby\";\r\n\r\ninterface DetailPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  allowEditing?: boolean;\r\n  returnPath?: string;\r\n}\r\n\r\ninterface DetailPageState {\r\n  isEditing: boolean;\r\n}\r\n\r\nclass DetailPage extends React.PureComponent<DetailPageProps, DetailPageState> {\r\n  public constructor(props: DetailPageProps) {\r\n    super(props);\r\n\r\n    this.state = { isEditing: false };\r\n  }\r\n\r\n  public toggleEditMode(): void {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n\r\n  public setEditingState(newState: boolean): void {\r\n    this.setState({ isEditing: newState });\r\n  }\r\n\r\n  public goBack(event: Event): void {\r\n    event.stopPropagation();\r\n    if (this.props.returnPath) {\r\n      navigate(withPrefix(this.props.returnPath));\r\n    } else {\r\n      history.back();\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const toggleEditingStateButton = !this.state.isEditing ? (\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={this.setEditingState.bind(this, !this.state.isEditing)}\r\n      >\r\n        {this.state.isEditing ? \"Stop editing\" : \"Edit\"}\r\n      </button>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"detail-wrapper\">\r\n        <div className=\"detail-header-button-wrapper\">\r\n          <button className=\"btn btn-primary\" onClick={this.goBack.bind(this)}>\r\n            Back\r\n          </button>\r\n          {toggleEditingStateButton}\r\n        </div>\r\n\r\n        <ConnectedEditPage\r\n          editorTemplate={this.props.editorTemplate}\r\n          editMode={this.state.isEditing}\r\n          onCancelCallback={this.setEditingState.bind(this, false)}\r\n          onSuccessCallback={this.setEditingState.bind(this, false)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailPage;\r\n","import * as React from \"react\";\r\nimport { extractQueryParameter } from \"global/helper/extract-query-parameter\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport DetailPage from \"./detail-page\";\r\n\r\ninterface ExhibitDetailPageProps {\r\n  allowEditing?: boolean;\r\n  id: string;\r\n  // redux\r\n  editorTemplate?: EditorTemplate;\r\n}\r\n\r\ninterface ExhibitDetailPageState {}\r\n\r\nclass ExhibitDetailPage extends React.PureComponent<\r\n  ExhibitDetailPageProps,\r\n  ExhibitDetailPageState\r\n> {\r\n  public constructor(props: ExhibitDetailPageProps) {\r\n    super(props);\r\n  }\r\n\r\n  public static mapStateToProps(\r\n    state: AppState,\r\n    ownProps: ExhibitDetailPageProps\r\n  ): any {\r\n    return state.exhibits.get(ownProps.id)\r\n      ? { editorTemplate: state.exhibits.get(ownProps.id).getEditorTemplate() }\r\n      : {};\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    if (!this.props.editorTemplate) {\r\n      console.error(\"No editor template found! Error!\");\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"animal-detail-wrapper\">\r\n        <DetailPage\r\n          editorTemplate={this.props.editorTemplate}\r\n          returnPath=\"/exhibits/\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedExhibitDetailPage = connect(ExhibitDetailPage.mapStateToProps)(\r\n  ExhibitDetailPage\r\n);\r\n\r\nexport default ConnectedExhibitDetailPage;\r\n","import * as React from \"react\";\r\nimport { ConnectedLayout } from \"../components/layout/layout\";\r\nimport ConnectedExhibitDetailPage from \"components/detail-page/exhibit-detail-page\";\r\nimport memoizeOne from \"memoize-one\";\r\nimport { getMemoizedIdFunction } from \"global/helper/extract-query-parameter\";\r\n\r\ninterface ExhibitDetailsPageProps {\r\n  location: any;\r\n}\r\n\r\nclass ExhibitDetailsPage extends React.PureComponent<ExhibitDetailsPageProps> {\r\n  public getId: (\r\n    searchString?: string\r\n  ) => string | undefined = getMemoizedIdFunction();\r\n\r\n  public render(): JSX.Element {\r\n    const queryData = this.props.location\r\n      ? this.props.location.search\r\n      : undefined;\r\n\r\n    return (\r\n      <ConnectedLayout title=\"Exhibit Details\" iconName=\"house_siding\">\r\n        <ConnectedExhibitDetailPage\r\n          allowEditing={true}\r\n          id={this.getId(queryData)}\r\n        />\r\n      </ConnectedLayout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExhibitDetailsPage;\r\n","import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EditorElement } from \"global/types/editor-element\";\r\nimport { AppState } from \"global/state/state\";\r\nimport { ActionType } from \"global/store/dispatchActions\";\r\nimport { EditorTemplate } from \"global/types/editor-template\";\r\nimport \"./edit-page.scss\";\r\nimport { ErrorObject } from \"global/types/error-object\";\r\nimport { BaseType } from \"global/types/baseType\";\r\nimport { isEqual } from \"lodash\";\r\n\r\ninterface EditorPageProps {\r\n  editorTemplate: EditorTemplate;\r\n  editMode: boolean;\r\n  onCancelCallback?: () => void;\r\n  onSuccessCallback?: () => void;\r\n  title?: string;\r\n  autoUpdateOnChange?: boolean; // NOTE: hides the submit and cancel buttons and causes the success and cancel callbacks to be ignored.\r\n  // from redux\r\n  dispatchFunction?: Function;\r\n}\r\n\r\ninterface EditorPageState {\r\n  currentData: any;\r\n  errors: ErrorObject[];\r\n}\r\n\r\nclass EditPage extends React.PureComponent<EditorPageProps, EditorPageState> {\r\n  public constructor(props: EditorPageProps) {\r\n    super(props);\r\n\r\n    const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n      this.getInitialState(props)\r\n    );\r\n    const initialErrors = !(dryRunResult instanceof BaseType)\r\n      ? dryRunResult\r\n      : [];\r\n\r\n    this.state = {\r\n      currentData: this.getInitialState(props),\r\n      errors: initialErrors,\r\n    };\r\n  }\r\n\r\n  public getInitialState(props: EditorPageProps): any {\r\n    const currentData: any = {};\r\n    props.editorTemplate\r\n      .getEditorElements()\r\n      .forEach((elem: EditorElement): void => {\r\n        if (!!elem.initialValue) {\r\n          currentData[elem.identifier] = elem.initialValue;\r\n        }\r\n      });\r\n    return currentData;\r\n  }\r\n\r\n  public onInputChange(newValue: string, identifier: string): void {\r\n    const newData = { ...this.state.currentData };\r\n    newData[identifier] = newValue;\r\n    if (!isEqual(newData, this.state.currentData)) {\r\n      const dryRunResult = this.props.editorTemplate.convertDataToObject(\r\n        newData\r\n      );\r\n      const errors = !(dryRunResult instanceof BaseType) ? dryRunResult : [];\r\n\r\n      this.setState({ currentData: newData, errors });\r\n    }\r\n  }\r\n\r\n  public createObject(event: Event): void {\r\n    event.stopPropagation();\r\n\r\n    const result = this.props.editorTemplate.convertDataToObject(\r\n      this.state.currentData\r\n    );\r\n\r\n    if (result instanceof BaseType) {\r\n      if (!!result && this.props.dispatchFunction) {\r\n        this.props.editorTemplate.reset(); // replace later with callback function!\r\n        this.props.dispatchFunction({\r\n          type: ActionType.add,\r\n          values: [result],\r\n          names: [this.props.editorTemplate.dataTypeName],\r\n        });\r\n        this.setState({ currentData: this.getInitialState(this.props) });\r\n\r\n        if (this.props.onSuccessCallback) {\r\n          this.props.onSuccessCallback();\r\n        }\r\n      } else {\r\n        console.warn(\"Unable to create object!, Invalid  or incomplete data!\");\r\n      }\r\n    } else {\r\n      this.setState({ errors: result });\r\n    }\r\n  }\r\n\r\n  public cancel(event: Event): void {\r\n    event.stopPropagation();\r\n    this.props.editorTemplate.reset(); // replace later with callback function!\r\n    this.setState({ currentData: this.getInitialState(this.props) });\r\n    if (!!this.props.onCancelCallback) {\r\n      this.props.onCancelCallback();\r\n    }\r\n  }\r\n\r\n  public static mapStateToProps(state: AppState): any {\r\n    return {};\r\n  }\r\n\r\n  public static mapDispatchToProps(dispatch: any): any {\r\n    return {\r\n      dispatchFunction: dispatch,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const submitButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-success edit-page-button\"\r\n        onClick={this.createObject.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">add</i>Submit\r\n      </button>\r\n    ) : null;\r\n\r\n    const cancelButton = this.props.editMode ? (\r\n      <button\r\n        className=\"btn btn-danger edit-page-button\"\r\n        onClick={this.cancel.bind(this)}\r\n      >\r\n        <i className=\"material-icons layout-link-icon\">close</i>Cancel\r\n      </button>\r\n    ) : null;\r\n\r\n    const title = this.props.title ? (\r\n      <h3 className=\"display-8\">{this.props.title}</h3>\r\n    ) : null;\r\n\r\n    return (\r\n      <div className=\"edit-wrapper\">\r\n        {title}\r\n        <div className=\"edit-page-contents\">\r\n          {this.props.editorTemplate.getEditorElements().map(\r\n            (editorElement: EditorElement): JSX.Element => {\r\n              const error = this.state.errors.find(\r\n                (error: ErrorObject): boolean =>\r\n                  error.inputIdentifier === editorElement.identifier\r\n              );\r\n\r\n              return editorElement.render(\r\n                this.props.editMode,\r\n                this.onInputChange.bind(this),\r\n                error\r\n              );\r\n            }\r\n          )}\r\n        </div>\r\n        <div className=\"edit-page-buttons-wrapper\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedEditPage = connect(\r\n  EditPage.mapStateToProps,\r\n  EditPage.mapDispatchToProps\r\n)(EditPage);\r\n\r\nexport default ConnectedEditPage;\r\n"],"sourceRoot":""}