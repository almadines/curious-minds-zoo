{"version":3,"sources":["webpack:///./src/components/lists/exhibits-list.tsx","webpack:///./src/pages/exhibits.tsx"],"names":["ExhibitsListPage","props","getListElementWrapper","memoize","exhibits","linkDetailPages","listElems","Array","from","values","map","exhibit","ExhibitListElement","animalId","id","navigate","withPrefix","undefined","ExhibitListWrapper","state","createFormOpen","mapStateToProps","ownProps","filterByStaffId","filter","staffIds","includes","sort","a","b","name","setCreateFormOpenState","newState","this","setState","render","exhibitListWrapper","createFormContents","className","editorTemplate","Exhibit","getNewEditorTemplate","editMode","onCancelCallback","bind","onSuccessCallback","title","onClick","listElementWrapper","includeSearchFilter","tableMode","React","ConnectedExhibitsListPage","connect","ExhibitsPage"],"mappings":"+VA2BMA,E,oBAyBJ,WAAYC,GAA8B,aACxC,cAAMA,IAAN,MAtBKC,sBAAwBC,aAC7B,SAACC,EAAqBC,GACpB,IAMMC,EAAYC,MAAMC,KAAKJ,EAASK,UAAUC,KAC9C,SAACC,GAAD,OACE,IAAIC,IACFD,EACAN,GATJQ,EASiDF,EAAQG,GARxC,WACjBC,mBAASC,YAAW,uBAAuBH,WAOoBI,GAV9B,IACjCJ,KAaF,OAAO,IAAIK,IAAmBZ,KAhBI,KAuBpC,EAAKa,MAAQ,CAAEC,gBAAgB,GAFS,E,yFAK5BC,gBAAd,SACEF,EACAG,GAEA,IAAIlB,EAAWG,MAAMC,KAAKW,EAAMf,SAASK,UAWzC,OAVIa,EAASC,kBACXnB,EAAWA,EAASoB,QAAO,SAACb,GAAD,OACzBA,EAAQc,SAASC,SAASJ,EAASC,qBAQhC,CACLnB,SALFA,EAAWA,EAASuB,MAAK,SAACC,EAAYC,GAAb,OACvBD,EAAEE,KAAOD,EAAEC,KAAO,GAAK,O,2BAQpBC,uBAAP,SAA8BC,GAC5BC,KAAKC,SAAS,CAAEd,eAAgBY,K,EAG3BG,OAAP,WACE,IAAMC,EAAqBH,KAAK/B,sBAC9B+B,KAAKhC,MAAMG,SACX6B,KAAKhC,MAAMI,iBAGPgC,EAAuBJ,KAAKd,MAAMC,eACtC,uBAAKkB,UAAU,uCACb,gBAAC,IAAD,CACEC,eAAgBC,IAAQC,uBACxBC,UAAU,EACVC,iBAAkBV,KAAKF,uBAAuBa,KAAKX,MAAM,GACzDY,kBAAmBZ,KAAKF,uBAAuBa,KAAKX,MAAM,GAC1Da,MAAM,oBAIV,0BACER,UAAU,8CACVS,QAASd,KAAKF,uBAAuBa,KAAKX,MAAM,IAFlD,kBAQF,OACE,uBAAKK,UAAU,yBACb,uBACEA,UAAS,sCACPL,KAAKd,MAAMC,eACP,mBACA,uBAGLiB,GAEH,uBAAKC,UAAU,iCACb,gBAAC,IAAD,CACEU,mBAAoBZ,EACpBa,qBAAqB,EACrBC,WAAW,O,GA9FQC,iBAyGhBC,EAHmBC,kBAAQrD,EAAiBqB,gBAAzBgC,CAChCrD,G,IC9HIsD,E,gLACJnB,OAAA,WACE,OACE,gBAAC,IAAD,CAAQW,MAAM,aACZ,gBAAC,EAAD,CAA2BzC,iBAAiB,M,GAJzB8C,aAUZG","file":"component---src-pages-exhibits-tsx-d3a24a7af1fbe5e163ae.js","sourcesContent":["import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport memoize from \"memoize-one\";\r\nimport { AppState } from \"../../global/state/state\";\r\nimport ListDisplay from \"./list-display\";\r\nimport {\r\n  ExhibitListElement,\r\n  ListElementWrapper,\r\n  ExhibitListWrapper,\r\n} from \"global/types/list-element\";\r\nimport { Exhibit } from \"global/types/exhibit\";\r\nimport { isEqual } from \"lodash\";\r\nimport { navigate } from \"@reach/router\";\r\nimport ConnectedEditPage from \"components/edit-page/edit-page\";\r\nimport \"./instance-list-styles.scss\";\r\nimport { withPrefix } from \"gatsby\";\r\n\r\ninterface ExhibitsListPageProps {\r\n  exhibits?: Exhibit[];\r\n  filterByStaffId?: string;\r\n  linkDetailPages?: boolean;\r\n}\r\n\r\ninterface ExhibitsListPageState {\r\n  createFormOpen: boolean;\r\n}\r\n\r\nclass ExhibitsListPage extends React.PureComponent<\r\n  ExhibitsListPageProps,\r\n  ExhibitsListPageState\r\n> {\r\n  public getListElementWrapper = memoize(\r\n    (exhibits: Exhibit[], linkDetailPages): ListElementWrapper => {\r\n      const onClickCallbackConstructor = (\r\n        animalId: string\r\n      ): (() => void) => () => {\r\n        navigate(withPrefix(`/exhibit-details?id=${animalId}`));\r\n      };\r\n\r\n      const listElems = Array.from(exhibits.values()).map(\r\n        (exhibit: Exhibit): ExhibitListElement =>\r\n          new ExhibitListElement(\r\n            exhibit,\r\n            linkDetailPages ? onClickCallbackConstructor(exhibit.id) : undefined\r\n          )\r\n      );\r\n\r\n      return new ExhibitListWrapper(listElems);\r\n    },\r\n    isEqual\r\n  );\r\n\r\n  constructor(props: ExhibitsListPageProps) {\r\n    super(props);\r\n    this.state = { createFormOpen: false };\r\n  }\r\n\r\n  public static mapStateToProps(\r\n    state: AppState,\r\n    ownProps: ExhibitsListPageProps\r\n  ): any {\r\n    let exhibits = Array.from(state.exhibits.values());\r\n    if (ownProps.filterByStaffId) {\r\n      exhibits = exhibits.filter((exhibit: Exhibit): boolean =>\r\n        exhibit.staffIds.includes(ownProps.filterByStaffId)\r\n      );\r\n    }\r\n\r\n    exhibits = exhibits.sort((a: Exhibit, b: Exhibit): number =>\r\n      a.name > b.name ? 1 : -1\r\n    );\r\n\r\n    return {\r\n      exhibits,\r\n    };\r\n  }\r\n\r\n  public setCreateFormOpenState(newState: boolean): void {\r\n    this.setState({ createFormOpen: newState });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const exhibitListWrapper = this.getListElementWrapper(\r\n      this.props.exhibits,\r\n      this.props.linkDetailPages\r\n    );\r\n\r\n    const createFormContents = !!this.state.createFormOpen ? (\r\n      <div className=\"instance-list-create-form-container\">\r\n        <ConnectedEditPage\r\n          editorTemplate={Exhibit.getNewEditorTemplate()}\r\n          editMode={true}\r\n          onCancelCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          onSuccessCallback={this.setCreateFormOpenState.bind(this, false)}\r\n          title=\"Create Exhibit\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      <button\r\n        className=\"btn btn-success instance-list-create-button\"\r\n        onClick={this.setCreateFormOpenState.bind(this, true)}\r\n      >\r\n        Create Exhibit\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"instance-list-wrapper\">\r\n        <div\r\n          className={`instance-list-create-form-wrapper ${\r\n            this.state.createFormOpen\r\n              ? \"create-form-open\"\r\n              : \"create-form-closed\"\r\n          }`}\r\n        >\r\n          {createFormContents}\r\n        </div>\r\n        <div className=\"instance-list-content-wrapper\">\r\n          <ListDisplay\r\n            listElementWrapper={exhibitListWrapper}\r\n            includeSearchFilter={true}\r\n            tableMode={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ConnectedExhibitsListPage = connect(ExhibitsListPage.mapStateToProps)(\r\n  ExhibitsListPage\r\n);\r\nexport default ConnectedExhibitsListPage;\r\n","import * as React from \"react\";\r\nimport { Layout } from \"../components/layout/layout\";\r\nimport ConnectedExhibitsListPage from \"components/lists/exhibits-list\";\r\n\r\nclass ExhibitsPage extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <Layout title=\"Exhibits:\">\r\n        <ConnectedExhibitsListPage linkDetailPages={true} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExhibitsPage;\r\n"],"sourceRoot":""}